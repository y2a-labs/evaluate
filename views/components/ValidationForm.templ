package components

import "fmt"
import "script_validation/models"

type llm struct {
	Name    string
	Checked bool
}

var llms = []llm{
	{Name: "openchat/openchat-7b", Checked: true},
	{Name: "undi95/toppy-m-7b", Checked: true},
	{Name: "gryphe/mythomax-l2-13b", Checked: false},
	{Name: "nousresearch/nous-hermes-llama2-13b", Checked: false},
}

func isChecked(model string, evalModels []string) bool {
	for _, evalModel := range evalModels {
		if model == evalModel {
			return true
		}
	}
	return false
}

templ ValidationForm(conversation *models.Conversation) {
	<form hx-post={ fmt.Sprintf("/conversations/%s/evaluate", conversation.ID) } class="flex flex-col space-y-2" hx-target="#messages" hx-swap="innerHTML" enctype="multipart/form-data">
		<label for="prompt">
			<span>Prompt</span>
			<textarea name="prompt" class="textarea rounded-lg w-full" placeholder="Enter your prompt">{ conversation.EvalPrompt }</textarea>
		</label>
		<label for="test-count">
			<span id="myRangeValue">Test Count: { fmt.Sprintf("%d", conversation.EvalTestCount) }</span>
			<input type="range" min="1" max="5" name="test_count" value={ fmt.Sprintf("%d", conversation.EvalTestCount) } class="slider" id="myRange"/>
		</label>
		<div>
			<span class="text-lg">Models:</span>
			<div class="grid lg:grid-cols-2 gap-4">
				for _, model := range llms {
					<label for="models">
						<input type="checkbox" name="models" checked?={ isChecked(model.Name, conversation.EvalModels) } value={ model.Name }/>
						<span>{ model.Name }</span>
					</label>
				}
			</div>
		</div>
		<button type="submit" class="border border-solid bg-slate-200 rounded-xl px-4 py-2">Submit</button>
	</form>
	<script>
		document.getElementById("myRange").addEventListener("input", function() {
			document.getElementById("myRangeValue").innerText = "Test Count: " + this.value;
		});
	</script>
}
