package components

import "script_validation/handlers"

import "fmt"
import "sort"

templ Layout() {
	<html lang="en" class="w-full h-full">
		<head>
			<meta charset="UTF-8"/>
			<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		</head>
		<link href="output.css" rel="stylesheet"/>
		<body class="h-full overflow-hidden">
			<div id="app" class="h-full overflow-y-auto">
				{ children... }
			</div>
			<script src="htmx.min.js"></script>
		</body>
	</html>
}

templ ErrorMessage(err error) {
	<div class="text-red-500 text-md">{ err.Error() }</div>
}

templ Nav() {
	<nav class="bg-slate-100 p-4">
		<div class="text-xl">Script Validator</div>
	</nav>
}

func SimilarityToString(similarity float64) string {
	return fmt.Sprintf("%.2f", similarity*100)
}

func LatencyMsToString(latencyMs int64) string {
	return fmt.Sprintf("%.2fs", float64(latencyMs)/1000.0)
}

func SortedLLMList(lst map[string]handlers.LLMSimilarityList) []handlers.LLMSimilarityList {
	// Create a slice of the map's values
	similarityList := make([]handlers.LLMSimilarityList, 0, len(lst))
	for _, value := range lst {
		similarityList = append(similarityList, value)
	}

	// Sort the slice by AverageSimilarity
	sort.Slice(similarityList, func(i, j int) bool {
		return similarityList[i].AverageSimilarity > similarityList[j].AverageSimilarity
	})

	// Return the sorted slice
	return similarityList
}

templ TestResult(msg handlers.Message) {
	for _, v := range SortedLLMList(msg.LLMSimilarityList) {
		<details>
			<summary class="text-md">
				<b>{ v.Model }: </b>
				<span>{ SimilarityToString(v.AverageSimilarity) }%</span>
			</summary>
			<div class="flex flex-col space-y-2">
				for _, v := range v.LLMResponses {
					<div class="text-md flex space-x-2">
						<div>{ SimilarityToString(v.Similarity) }%: <br/> { LatencyMsToString(v.LatencyMs) }</div>
						<div class="w-full">{ v.LLMResponse }</div>
					</div>
				}
			</div>
		</details>
	}
}

templ ResultMessage(messages []handlers.Message) {
	<div class="p-2 flex flex-col space-y-4">
		for _, msg := range messages {
			<div class="p-4 border border-solid rounded-xl">
				<div class="text-md font-bold">{ msg.Role }</div>
				<div class="text-md">{ msg.Content }</div>
				<div class="flex flex-col px-4 space-y-2">
					@TestResult(msg)
				</div>
			</div>
		}
	</div>
}

templ Home() {
	@Layout() {
		@Nav()
		<div class="container mx-auto max-w-4xl py-8 px-4">
			<div class="py-4">
				@ValidationForm()
				<h2 class="text-xl py-4">Test Results:</h2>
				<div id="testResults" class="flex flex-col space-y-4"></div>
			</div>
		</div>
	}
}
