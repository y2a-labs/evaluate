// Generated by server.go.tmpl
package service

import (
	"script_validation/models"
)

func (s *Service) Get{{capitalize .StructName}}(id string) (*models.{{capitalize .StructName}}, error) {
	{{lower .StructName}} := &models.{{.StructName}}{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First({{lower .StructName}})
	if tx.Error != nil {
		return nil, tx.Error
	}
	return {{lower .StructName}}, nil
}

func (s *Service) Create{{capitalize .StructName}}(input models.{{capitalize .StructName}}Create) (*models.{{capitalize .StructName}}, error) {
	{{lower .StructName}} := &models.{{.StructName}}{}
	tx := s.Db.Create({{lower .StructName}})
	if tx.Error != nil {
		return nil, tx.Error
	}
	return {{lower .StructName}}, nil
}

func (s *Service) GetAll{{capitalize .StructName}}s() (*[]models.{{capitalize .StructName}}, error) {
	{{lower .StructName}}s := &[]models.{{.StructName}}{}
	tx := s.Db.Find({{lower .StructName}}s)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return {{lower .StructName}}s, nil
}

func (s *Service) Update{{capitalize .StructName}}(id string, input models.{{capitalize .StructName}}Update) (*models.{{capitalize .StructName}}, error) {
	{{lower .StructName}} := &models.{{.StructName}}{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First({{lower .StructName}})
	if tx.Error != nil {
		return nil, tx.Error
	}
	// Apply the updates to the model
	// {{lower .StructName}}.Field = input.Field
	tx = s.Db.Updates({{lower .StructName}})
	if tx.Error != nil {
		return nil, tx.Error
	}
	return {{lower .StructName}}, nil
}

func (s *Service) Delete{{capitalize .StructName}}(id string) (*models.{{capitalize .StructName}}, error) {
	{{lower .StructName}} := &models.{{.StructName}}{BaseModel: models.BaseModel{ID: id}}

	tx := s.Db.First({{lower .StructName}})
	if tx.Error != nil {
		return nil, tx.Error
	}
	tx = s.Db.Delete({{lower .StructName}})
	if tx.Error != nil {
		return nil, tx.Error
	}
	return nil, nil
}

type {{capitalize .StructName}}Manager interface {
	Get{{capitalize .StructName}}(id string) (*models.{{capitalize .StructName}}, error)
	Create{{capitalize .StructName}}(*models.{{capitalize .StructName}}Create) (*models.{{capitalize .StructName}}, error)
	GetAll{{capitalize .StructName}}s() ([]*models.{{capitalize .StructName}}, error)
	Update{{capitalize .StructName}}(id string, input models.{{capitalize .StructName}}Update) (*models.{{capitalize .StructName}}, error)
	Delete{{capitalize .StructName}}(id string) (any, error)
}

/*
Append these structs to your models file if you don't have them already
type {{ capitalize .StructName}} struct {
	// TODO add ressources
	ID string `json:"id"`
}

type {{ capitalize .StructName}}Create struct {
	// TODO add ressources
	ID string `json:"id"`
}

type {{ capitalize .StructName}}Update struct {
	// TODO add ressources
	ID string `json:"id"`
}
*/