// Generated by server.go.tmpl
package service

import (
	"script_validation/models"
)

func (s *Service) GetLLM(id string) (*models.LLM, error) {
	lLM := &models.LLM{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(lLM)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return lLM, nil
}

func (s *Service) GetLLMByIds(ids []string) ([]*models.LLM, error) {
	llms := []*models.LLM{}

	tx := s.Db.Where("id IN ?", ids).Find(&llms)
	if tx.Error != nil {
		return nil, tx.Error
	}

	return llms, nil
}

func (s *Service) GetLLMByProvider(providerId string) ([]*models.LLM, error) {
	llms := []*models.LLM{}

	tx := s.Db.Where("provider_id = ?", providerId).Find(&llms)
	if tx.Error != nil {
		return nil, tx.Error
	}

	return llms, nil
}

func (s *Service) CreateLLM(input models.LLMCreate) (*models.LLM, error) {
	llm := &models.LLM{
		BaseModel: models.BaseModel{ID: input.ID},
		ProviderID: input.ProviderID,
	}
	tx := s.Db.Create(llm)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return llm, nil
}

func (s *Service) GetAllLLMs() (*[]models.LLM, error) {
	lLMs := &[]models.LLM{}
	tx := s.Db.Find(lLMs)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return lLMs, nil
}

func (s *Service) UpdateLLM(id string, input models.LLMUpdate) (*models.LLM, error) {
	lLM := &models.LLM{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(lLM)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// Apply the updates to the model
	// lLM.Field = input.Field
	tx = s.Db.Updates(lLM)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return lLM, nil
}

func (s *Service) DeleteLLM(id string) (*models.LLM, error) {
	lLM := &models.LLM{BaseModel: models.BaseModel{ID: id}}

	tx := s.Db.First(lLM)
	if tx.Error != nil {
		return nil, tx.Error
	}
	tx = s.Db.Delete(lLM)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return nil, nil
}

type LLMManager interface {
	GetLLM(id string) (*models.LLM, error)
	CreateLLM(*models.LLMCreate) (*models.LLM, error)
	GetAllLLMs() ([]*models.LLM, error)
	UpdateLLM(id string, input models.LLMUpdate) (*models.LLM, error)
	DeleteLLM(id string) (any, error)
}

/*
Append these structs to your models file if you don't have them already
type LLM struct {
	// TODO add ressources
	ID string `json:"id"`
}

type LLMCreate struct {
	// TODO add ressources
	ID string `json:"id"`
}

type LLMUpdate struct {
	// TODO add ressources
	ID string `json:"id"`
}
*/
