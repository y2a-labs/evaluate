// Generated by server.go.tmpl
package service

import (
	"fmt"
	"math"
	"script_validation/models"
)

func (s *Service) GetMessageMetadata(id string) (*models.MessageMetadata, error) {
	messageMetadata := &models.MessageMetadata{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(messageMetadata)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return messageMetadata, nil
}

func (s *Service) CreateMessageMetadata(input models.MessageMetadataCreate) (*models.MessageMetadata, error) {
	messageMetadata := &models.MessageMetadata{}
	tx := s.Db.Create(messageMetadata)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return messageMetadata, nil
}

func (s *Service) GetAllMessageMetadatas() (*[]models.MessageMetadata, error) {
	messageMetadatas := &[]models.MessageMetadata{}
	tx := s.Db.Find(messageMetadatas)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return messageMetadatas, nil
}

func (s *Service) UpdateMessageMetadata(id string, input models.MessageMetadataUpdate) (*models.MessageMetadata, error) {
	messageMetadata := &models.MessageMetadata{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(messageMetadata)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// Apply the updates to the model
	// messageMetadata.Field = input.Field
	tx = s.Db.Updates(messageMetadata)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return messageMetadata, nil
}

func (s *Service) DeleteMessageMetadata(id string) (*models.MessageMetadata, error) {
	messageMetadata := &models.MessageMetadata{BaseModel: models.BaseModel{ID: id}}

	tx := s.Db.First(messageMetadata)
	if tx.Error != nil {
		return nil, tx.Error
	}
	tx = s.Db.Delete(messageMetadata)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return nil, nil
}

func (s *Service) CosineSimilarity(a, b []float32) (float64, error) {
	if len(a) != len(b) {
		return 0, fmt.Errorf("slices must be of the same length")
	}

	dotProduct := 0.0
	magA := 0.0
	magB := 0.0

	for i := range a {
		af64 := float64(a[i])
		bf64 := float64(b[i])
		dotProduct += af64 * bf64 // Calculate dot product
		magA += af64 * af64       // Sum for magnitude of a
		magB += bf64 * bf64       // Sum for magnitude of b
	}

	magA = math.Sqrt(magA) // Calculate magnitude of a
	magB = math.Sqrt(magB) // Calculate magnitude of b

	if magA == 0 || magB == 0 {
		return 0, nil
	}

	return dotProduct / (magA * magB), nil // Calculate cosine similarity
}

type MessageMetadataManager interface {
	GetMessageMetadata(id string) (*models.MessageMetadata, error)
	CreateMessageMetadata(*models.MessageMetadataCreate) (*models.MessageMetadata, error)
	GetAllMessageMetadatas() ([]*models.MessageMetadata, error)
	UpdateMessageMetadata(id string, input models.MessageMetadataUpdate) (*models.MessageMetadata, error)
	DeleteMessageMetadata(id string) (any, error)
}