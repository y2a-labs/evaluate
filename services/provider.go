// Generated by server.go.tmpl
package service

import (
	"script_validation/models"
)

func (s *Service) GetProvider(id string) (*models.Provider, error) {
	provider := &models.Provider{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(provider)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return provider, nil
}

func (s *Service) CreateProvider(input models.ProviderCreate) (*models.Provider, error) {
	provider := &models.Provider{}
	tx := s.Db.Create(provider)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return provider, nil
}

func (s *Service) GetAllProviders() (*[]models.Provider, error) {
	providers := &[]models.Provider{}
	tx := s.Db.Find(providers)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return providers, nil
}

func (s *Service) UpdateProvider(id string, input models.ProviderUpdate) (*models.Provider, error) {
	provider := &models.Provider{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(provider)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// Apply the updates to the model
	// provider.Field = input.Field
	tx = s.Db.Updates(provider)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return provider, nil
}

func (s *Service) DeleteProvider(id string) (*models.Provider, error) {
	provider := &models.Provider{BaseModel: models.BaseModel{ID: id}}

	tx := s.Db.First(provider)
	if tx.Error != nil {
		return nil, tx.Error
	}
	tx = s.Db.Delete(provider)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return nil, nil
}

type ProviderManager interface {
	GetProvider(id string) (*models.Provider, error)
	CreateProvider(*models.ProviderCreate) (*models.Provider, error)
	GetAllProviders() ([]*models.Provider, error)
	UpdateProvider(id string, input models.ProviderUpdate) (*models.Provider, error)
	DeleteProvider(id string) (any, error)
}

/*
Append these structs to your models file if you don't have them already
type Provider struct {
	// TODO add ressources
	ID string `json:"id"`
}

type ProviderCreate struct {
	// TODO add ressources
	ID string `json:"id"`
}

type ProviderUpdate struct {
	// TODO add ressources
	ID string `json:"id"`
}
*/