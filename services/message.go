// Generated by server.go.tmpl
package service

import (
	"script_validation/models"
)

func (s *Service) GetMessage(id string) (*models.Message, error) {
	message := &models.Message{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(message)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return message, nil
}

func (s *Service) CreateMessage(input models.MessageCreate) (*models.Message, error) {
	message := &models.Message{}
	tx := s.Db.Create(message)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return message, nil
}

func (s *Service) GetAllMessages() (*[]models.Message, error) {
	messages := &[]models.Message{}
	tx := s.Db.Find(messages)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return messages, nil
}

func (s *Service) UpdateMessage(id string, input models.MessageUpdate) (*models.Message, error) {
	message := &models.Message{BaseModel: models.BaseModel{ID: id}}
	tx := s.Db.First(message)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// Apply the updates to the model
	// message.Field = input.Field
	tx = s.Db.Updates(message)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return message, nil
}

func (s *Service) DeleteMessage(id string) (*models.Message, error) {
	message := &models.Message{BaseModel: models.BaseModel{ID: id}}

	tx := s.Db.First(message)
	if tx.Error != nil {
		return nil, tx.Error
	}
	tx = s.Db.Delete(message)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return nil, nil
}

type MessageManager interface {
	GetMessage(id string) (*models.Message, error)
	CreateMessage(*models.MessageCreate) (*models.Message, error)
	GetAllMessages() ([]*models.Message, error)
	UpdateMessage(id string, input models.MessageUpdate) (*models.Message, error)
	DeleteMessage(id string) (any, error)
}

/*
Append these structs to your models file if you don't have them already
type Message struct {
	// TODO add ressources
	ID string `json:"id"`
}

type MessageCreate struct {
	// TODO add ressources
	ID string `json:"id"`
}

type MessageUpdate struct {
	// TODO add ressources
	ID string `json:"id"`
}
*/